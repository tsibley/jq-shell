#!/bin/bash
# usage: jq-shell [jq options] [<file.json> [<file.json>]]
#        ... | jq-shell [jq options]

# MIT License
#
# Copyright Â© 2018 Thomas Sibley <tom at zulutango.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Note: "Strict mode" (set -euo pipefail) is not enabled because it would cause
# this program itself to exit as soon as an invalid jq command was entered at
# the prompt.

: "${PAGER:=less -SRFXi}"
: "${HISTFILE:=$HOME/.jq_history}"

# Helper for multiple traps on EXIT
exit_commands=()

on-exit() {
    exit_commands+=("$*;")
    trap "${exit_commands[*]}" EXIT
}

# Handle input from stdin when stdin isn't a terminal
if [[ ! -t 0 ]]; then
    # Write input to a temporary file.
    tmpfile="$(mktemp -t)"
    on-exit 'rm "$tmpfile"'
    cat > "$tmpfile"

    # Append that filename to the argument list.
    set -- "$@" "$tmpfile"

    # Re-open stdin to the terminal so the REPL works as expected.
    exec < /dev/tty
fi

# At least one filename is required, so if we don't have more than one
# argument, just show the usage.
if [[ $# -eq 0 ]]; then
    # This would be a tiny Perl one-liner, but let's keep this in bash. ;-)
    while read -r usage; do
        if [[ $usage =~ ^#! ]]; then
            continue
        elif [[ $usage == "" ]]; then
            break
        else
            echo "${usage#\#?}"
        fi
    done < "$0"
    exit 2
fi

# Save argument list for clarity later on.
arguments=("$@")

# Prompt setup
bold=$'\001\e[1m\002'
reset=$'\001\e[0m\002'
prompt="jq> "

# The middle part of read, eval, print, loop
eval-print() {
    local cmd="$*"

    # Each command line is run as a file so that this program can accept an
    # arbitrary mix of jq options and filenames as its own arguments and just
    # pass them along.  Normally the filter needs to be between the options and
    # filenames when specified on the command line, but using --from-file
    # avoids this need.
    jq --from-file /dev/stdin --color-output "${arguments[@]}" <<<"$cmd" | $PAGER
}

# Read history and ensure it's written on exit
history -r
on-exit history -w

# Start by showing the document, like a pager
eval-print "."

# REPL, with readline editing/history
while read -e -r -p "${bold}${prompt}${reset}" cmd; do
    if [[ -n "$cmd" ]]; then
        eval-print "$cmd"

        # Add command to history
        history -s "$cmd"
    fi
done
